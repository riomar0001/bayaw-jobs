generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model applicants_account {
  id                              String                           @id @default(uuid())
  username                        String                           @unique
  email                           String                           @unique
  password                        String
  done_onboarding                 Boolean                          @default(false)
  created_at                      DateTime                         @default(now())
  updated_at                      DateTime                         @default(now())
  applicants_education            applicants_education[]
  applicants_experience           applicants_experience[]
  applicants_personal_information applicants_personal_information?
  applicants_profile_picture      applicants_profile_picture?
  applicants_resume               applicants_resume?
  applicants_social_media         applicants_social_media?
  job_applicants                  job_applicants[]
}

model applicants_personal_information {
  id                    String             @id @default(uuid())
  applicants_account_id String             @unique
  first_name            String
  last_name             String
  contact_no            String
  date_of_birth         String?
  address               String?
  professional_title    String?
  website               String?
  work_type             WorkType[]         @default([])
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now())
  applicant             applicants_account @relation(fields: [applicants_account_id], references: [id], onDelete: Cascade)
}

model applicants_social_media {
  id                    String             @id @default(uuid())
  applicants_account_id String             @unique
  facebook              String?
  twitter               String?
  linkedin              String?
  github                String?
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now())
  applicant             applicants_account @relation(fields: [applicants_account_id], references: [id], onDelete: Cascade)
}

model applicants_profile_picture {
  id                    String             @id @default(uuid())
  applicants_account_id String             @unique
  profile_picture       String
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now())
  applicant             applicants_account @relation(fields: [applicants_account_id], references: [id], onDelete: Cascade)
}

model applicants_resume {
  id                    String             @id @default(uuid())
  applicants_account_id String             @unique
  resume_file           String
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now())
  applicant             applicants_account @relation(fields: [applicants_account_id], references: [id], onDelete: Cascade)
}

model applicants_experience {
  id                    String             @id @default(uuid())
  company               String
  location              String
  position              String
  worked_years          String
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now())
  applicants_account_id String
  applicant             applicants_account @relation(fields: [applicants_account_id], references: [id], onDelete: Cascade)
}

model applicants_education {
  id                    String             @id @default(uuid())
  applicants_account_id String
  school_name           String
  degree                String
  field_of_study        String
  start_date            String
  end_date              String
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now())
  applicants            applicants_account @relation(fields: [applicants_account_id], references: [id], onDelete: Cascade)
}

model companies_account {
  id                     String                  @id @default(uuid())
  username               String                  @unique
  password               String
  email                  String                  @unique
  done_onboarding        Boolean                 @default(false)
  created_at             DateTime                @default(now())
  updated_at             DateTime                @default(now())
  companies_information  companies_information?
  companies_logo         companies_logo?
  companies_social_media companies_social_media?
  posted_jobs            job_offers[]
}

model companies_information {
  id                 String              @id @default(uuid())
  company_account_id String              @unique
  name               String
  address            String
  description        String
  contact_no         String
  email              String
  industry_id        String?
  created_at         DateTime            @default(now())
  updated_at         DateTime            @default(now())
  companies          companies_account   @relation(fields: [company_account_id], references: [id], onDelete: Cascade)
  industry           company_industries? @relation(fields: [industry_id], references: [id])
}

model companies_logo {
  id                 String            @id @default(uuid())
  company_account_id String            @unique
  logo_file          String
  created_at         DateTime          @default(now())
  updated_at         DateTime          @default(now())
  companies          companies_account @relation(fields: [company_account_id], references: [id], onDelete: Cascade)
}

model companies_social_media {
  id                 String            @id @default(uuid())
  company_account_id String            @unique
  facebook           String?
  twitter            String?
  linkedin           String?
  github             String?
  created_at         DateTime          @default(now())
  updated_at         DateTime          @default(now())
  companies          companies_account @relation(fields: [company_account_id], references: [id], onDelete: Cascade)
}

model company_industries {
  id                    String                  @id @default(uuid())
  name                  String                  @unique
  created_at            DateTime                @default(now())
  updated_at            DateTime                @default(now())
  companies_information companies_information[]
}

model job_offers {
  id                 String            @id @default(uuid())
  company_account_id String
  title              String
  description        String
  location           String
  category           String?
  salary_from        Int?
  salary_to          Int?
  work_schedule      String?
  years_exp          Int?
  is_closed          Boolean
  created_at         DateTime          @default(now())
  updated_at         DateTime          @default(now())
  job_applications   job_applicants[]
  companies          companies_account @relation(fields: [company_account_id], references: [id], onDelete: Cascade)
}

model job_applicants {
  id                    String             @id @default(uuid())
  job_id                String
  status                String
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now())
  applicants_account_id String
  applicants            applicants_account @relation(fields: [applicants_account_id], references: [id], onDelete: Cascade)
  job_offers            job_offers         @relation(fields: [job_id], references: [id], onDelete: Cascade)
  
}

enum WorkType {
  FullTime
  PartTime
  Contractual
  Freelance
  Internship
}
